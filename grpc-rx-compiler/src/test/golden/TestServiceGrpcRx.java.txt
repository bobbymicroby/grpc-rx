package io.grpc.testing.integration;

import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.rx.stub.ClientCallsRx.rxUnaryCall;
import static io.grpc.rx.stub.ClientCallsRx.rxServerStreamingCall;
import static io.grpc.rx.stub.ClientCallsRx.rxClientStreamingCall;
import static io.grpc.rx.stub.ClientCallsRx.rxBidiStreamingCall;
import static io.grpc.rx.stub.ServerCallsRx.rxUnaryCall;
import static io.grpc.rx.stub.ServerCallsRx.rxServerStreamingCall;
import static io.grpc.rx.stub.ServerCallsRx.rxClientStreamingCall;
import static io.grpc.rx.stub.ServerCallsRx.rxBidiStreamingCall;
import static io.grpc.rx.stub.ServerCallsRx.unimplementedUnaryCall;
import static io.grpc.rx.stub.ServerCallsRx.unimplementedServerStreamingCall;
import static io.grpc.rx.stub.ServerCallsRx.unimplementedClientStreamingCall;
import static io.grpc.rx.stub.ServerCallsRx.unimplementedBidiStreamingCall;

/**
 * <pre>
 * Test service that supports all call types.
 * </pre>
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler (version 0.1.0-SNAPSHOT)",
    comments = "Source: test.proto")
public class TestServiceGrpcRx {

  private TestServiceGrpcRx() {}

  public static final String SERVICE_NAME = "grpc.testing.TestService";

  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static final io.grpc.MethodDescriptor<io.grpc.testing.integration.Test.SimpleRequest,
      io.grpc.testing.integration.Test.SimpleResponse> METHOD_UNARY_CALL =
      io.grpc.MethodDescriptor.create(
          io.grpc.MethodDescriptor.MethodType.UNARY,
          generateFullMethodName(
              "grpc.testing.TestService", "UnaryCall"),
          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Test.SimpleRequest.getDefaultInstance()),
          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Test.SimpleResponse.getDefaultInstance()));
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static final io.grpc.MethodDescriptor<io.grpc.testing.integration.Test.StreamingOutputCallRequest,
      io.grpc.testing.integration.Test.StreamingOutputCallResponse> METHOD_STREAMING_OUTPUT_CALL =
      io.grpc.MethodDescriptor.create(
          io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING,
          generateFullMethodName(
              "grpc.testing.TestService", "StreamingOutputCall"),
          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Test.StreamingOutputCallRequest.getDefaultInstance()),
          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Test.StreamingOutputCallResponse.getDefaultInstance()));
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static final io.grpc.MethodDescriptor<io.grpc.testing.integration.Test.StreamingInputCallRequest,
      io.grpc.testing.integration.Test.StreamingInputCallResponse> METHOD_STREAMING_INPUT_CALL =
      io.grpc.MethodDescriptor.create(
          io.grpc.MethodDescriptor.MethodType.CLIENT_STREAMING,
          generateFullMethodName(
              "grpc.testing.TestService", "StreamingInputCall"),
          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Test.StreamingInputCallRequest.getDefaultInstance()),
          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Test.StreamingInputCallResponse.getDefaultInstance()));
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static final io.grpc.MethodDescriptor<io.grpc.testing.integration.Test.StreamingOutputCallRequest,
      io.grpc.testing.integration.Test.StreamingOutputCallResponse> METHOD_FULL_BIDI_CALL =
      io.grpc.MethodDescriptor.create(
          io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING,
          generateFullMethodName(
              "grpc.testing.TestService", "FullBidiCall"),
          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Test.StreamingOutputCallRequest.getDefaultInstance()),
          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Test.StreamingOutputCallResponse.getDefaultInstance()));
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static final io.grpc.MethodDescriptor<io.grpc.testing.integration.Test.StreamingOutputCallRequest,
      io.grpc.testing.integration.Test.StreamingOutputCallResponse> METHOD_HALF_BIDI_CALL =
      io.grpc.MethodDescriptor.create(
          io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING,
          generateFullMethodName(
              "grpc.testing.TestService", "HalfBidiCall"),
          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Test.StreamingOutputCallRequest.getDefaultInstance()),
          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Test.StreamingOutputCallResponse.getDefaultInstance()));

  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static TestServiceStub newStub(io.grpc.Channel channel) {
    return new TestServiceStub(channel);
  }

  /**
   * <pre>
   * Test service that supports all call types.
   * </pre>
   */
  public static abstract class TestServiceImplBase implements io.grpc.BindableService {

    /**
     * <pre>
     * One requestMore followed by one response.
     * The server returns the client payload as-is.
     * </pre>
     */
    public void unaryCall(io.grpc.testing.integration.Test.SimpleRequest request,
        io.reactivex.SingleObserver<io.grpc.testing.integration.Test.SimpleResponse> responseObserver) {
      unimplementedUnaryCall(METHOD_UNARY_CALL, responseObserver);
    }

    /**
     * <pre>
     * One requestMore followed by a sequence of responses (streamed download).
     * The server returns the payload with client desired type and sizes.
     * </pre>
     */
    public void streamingOutputCall(io.grpc.testing.integration.Test.StreamingOutputCallRequest request,
        org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallResponse> responseSubscriber) {
      unimplementedServerStreamingCall(METHOD_STREAMING_OUTPUT_CALL, responseSubscriber);
    }

    /**
     * <pre>
     * A sequence of requests followed by one response (streamed upload).
     * The server returns the aggregated size of client payload as the result.
     * </pre>
     */
    public org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingInputCallRequest> streamingInputCall(
        io.reactivex.SingleObserver<io.grpc.testing.integration.Test.StreamingInputCallResponse> responseObserver) {
      return unimplementedClientStreamingCall(METHOD_STREAMING_INPUT_CALL, responseObserver);
    }

    /**
     * <pre>
     * A sequence of requests with each requestMore served by the server immediately.
     * As one requestMore could lead to multiple responses, this interface
     * demonstrates the idea of full bidirectionality.
     * </pre>
     */
    public org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallRequest> fullBidiCall(
        org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallResponse> responseSubscriber) {
      return unimplementedBidiStreamingCall(METHOD_FULL_BIDI_CALL, responseSubscriber);
    }

    /**
     * <pre>
     * A sequence of requests followed by a sequence of responses.
     * The server buffers all the client requests and then serves them in order. A
     * stream of responses are returned to the client when the server starts with
     * first requestMore.
     * </pre>
     */
    public org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallRequest> halfBidiCall(
        org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallResponse> responseSubscriber) {
      return unimplementedBidiStreamingCall(METHOD_HALF_BIDI_CALL, responseSubscriber);
    }

    @java.lang.Override public io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            METHOD_UNARY_CALL,
            rxUnaryCall(
              new MethodHandlers<
                io.grpc.testing.integration.Test.SimpleRequest,
                io.grpc.testing.integration.Test.SimpleResponse>(
                  this, METHODID_UNARY_CALL)))
          .addMethod(
            METHOD_STREAMING_OUTPUT_CALL,
            rxServerStreamingCall(
              new MethodHandlers<
                io.grpc.testing.integration.Test.StreamingOutputCallRequest,
                io.grpc.testing.integration.Test.StreamingOutputCallResponse>(
                  this, METHODID_STREAMING_OUTPUT_CALL)))
          .addMethod(
            METHOD_STREAMING_INPUT_CALL,
            rxClientStreamingCall(
              new MethodHandlers<
                io.grpc.testing.integration.Test.StreamingInputCallRequest,
                io.grpc.testing.integration.Test.StreamingInputCallResponse>(
                  this, METHODID_STREAMING_INPUT_CALL)))
          .addMethod(
            METHOD_FULL_BIDI_CALL,
            rxBidiStreamingCall(
              new MethodHandlers<
                io.grpc.testing.integration.Test.StreamingOutputCallRequest,
                io.grpc.testing.integration.Test.StreamingOutputCallResponse>(
                  this, METHODID_FULL_BIDI_CALL)))
          .addMethod(
            METHOD_HALF_BIDI_CALL,
            rxBidiStreamingCall(
              new MethodHandlers<
                io.grpc.testing.integration.Test.StreamingOutputCallRequest,
                io.grpc.testing.integration.Test.StreamingOutputCallResponse>(
                  this, METHODID_HALF_BIDI_CALL)))
          .build();
    }
  }

  /**
   * <pre>
   * Test service that supports all call types.
   * </pre>
   */
  public static final class TestServiceStub extends io.grpc.stub.AbstractStub<TestServiceStub> {
    private TestServiceStub(io.grpc.Channel channel) {
      super(channel);
    }

    private TestServiceStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected TestServiceStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new TestServiceStub(channel, callOptions);
    }

    /**
     * <pre>
     * One requestMore followed by one response.
     * The server returns the client payload as-is.
     * </pre>
     */
    public void unaryCall(io.grpc.testing.integration.Test.SimpleRequest request,
        io.reactivex.SingleObserver<io.grpc.testing.integration.Test.SimpleResponse> responseObserver) {
      rxUnaryCall(
          getChannel().newCall(METHOD_UNARY_CALL, getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * One requestMore followed by a sequence of responses (streamed download).
     * The server returns the payload with client desired type and sizes.
     * </pre>
     */
    public void streamingOutputCall(io.grpc.testing.integration.Test.StreamingOutputCallRequest request,
        org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallResponse> responseSubscriber) {
      rxServerStreamingCall(
          getChannel().newCall(METHOD_STREAMING_OUTPUT_CALL, getCallOptions()), request, responseSubscriber);
    }

    /**
     * <pre>
     * A sequence of requests followed by one response (streamed upload).
     * The server returns the aggregated size of client payload as the result.
     * </pre>
     */
    public org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingInputCallRequest> streamingInputCall(
        io.reactivex.SingleObserver<io.grpc.testing.integration.Test.StreamingInputCallResponse> responseObserver) {
      return rxClientStreamingCall(
          getChannel().newCall(METHOD_STREAMING_INPUT_CALL, getCallOptions()), responseObserver);
    }

    /**
     * <pre>
     * A sequence of requests with each requestMore served by the server immediately.
     * As one requestMore could lead to multiple responses, this interface
     * demonstrates the idea of full bidirectionality.
     * </pre>
     */
    public org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallRequest> fullBidiCall(
        org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallResponse> responseSubscriber) {
      return rxBidiStreamingCall(
          getChannel().newCall(METHOD_FULL_BIDI_CALL, getCallOptions()), responseSubscriber);
    }

    /**
     * <pre>
     * A sequence of requests followed by a sequence of responses.
     * The server buffers all the client requests and then serves them in order. A
     * stream of responses are returned to the client when the server starts with
     * first requestMore.
     * </pre>
     */
    public org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallRequest> halfBidiCall(
        org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallResponse> responseSubscriber) {
      return rxBidiStreamingCall(
          getChannel().newCall(METHOD_HALF_BIDI_CALL, getCallOptions()), responseSubscriber);
    }
  }

  private static final int METHODID_UNARY_CALL = 0;
  private static final int METHODID_STREAMING_OUTPUT_CALL = 1;
  private static final int METHODID_STREAMING_INPUT_CALL = 2;
  private static final int METHODID_FULL_BIDI_CALL = 3;
  private static final int METHODID_HALF_BIDI_CALL = 4;

  private static class MethodHandlers<Req, Resp> implements
      io.grpc.rx.stub.ServerCallsRx.UnaryMethod<Req, Resp>,
      io.grpc.rx.stub.ServerCallsRx.ServerStreamingMethod<Req, Resp>,
      io.grpc.rx.stub.ServerCallsRx.ClientStreamingMethod<Req, Resp>,
      io.grpc.rx.stub.ServerCallsRx.BidiStreamingMethod<Req, Resp> {
    private final TestServiceImplBase serviceImpl;
    private final int methodId;

    public MethodHandlers(TestServiceImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.reactivex.SingleObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_UNARY_CALL:
          serviceImpl.unaryCall((io.grpc.testing.integration.Test.SimpleRequest) request,
              (io.reactivex.SingleObserver<io.grpc.testing.integration.Test.SimpleResponse>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, org.reactivestreams.Subscriber<Resp> responseSubscriber) {
      switch (methodId) {
        case METHODID_STREAMING_OUTPUT_CALL:
          serviceImpl.streamingOutputCall((io.grpc.testing.integration.Test.StreamingOutputCallRequest) request,
              (org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallResponse>) responseSubscriber);
          break;
        default:
          throw new AssertionError();
      }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public org.reactivestreams.Subscriber<Req> invoke(io.reactivex.SingleObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_STREAMING_INPUT_CALL:
          return (org.reactivestreams.Subscriber<Req>) serviceImpl.streamingInputCall((io.reactivex.SingleObserver<io.grpc.testing.integration.Test.StreamingInputCallResponse>) responseObserver);
        default:
          throw new AssertionError();
      }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public org.reactivestreams.Subscriber<Req> invoke(org.reactivestreams.Subscriber<Resp> responseSubscriber) {
      switch (methodId) {
        case METHODID_FULL_BIDI_CALL:
          return (org.reactivestreams.Subscriber<Req>) serviceImpl.fullBidiCall((org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallResponse>) responseSubscriber);
        case METHODID_HALF_BIDI_CALL:
          return (org.reactivestreams.Subscriber<Req>) serviceImpl.halfBidiCall((org.reactivestreams.Subscriber<io.grpc.testing.integration.Test.StreamingOutputCallResponse>) responseSubscriber);
        default:
          throw new AssertionError();
      }
    }

  }

  private static io.grpc.ServiceDescriptor serviceDescriptor;

  public static synchronized io.grpc.ServiceDescriptor getServiceDescriptor() {
    if (serviceDescriptor == null) {
      serviceDescriptor = new io.grpc.ServiceDescriptor(SERVICE_NAME,
          METHOD_UNARY_CALL,
          METHOD_STREAMING_OUTPUT_CALL,
          METHOD_STREAMING_INPUT_CALL,
          METHOD_FULL_BIDI_CALL,
          METHOD_HALF_BIDI_CALL);
    }

    return serviceDescriptor;
  }
}
